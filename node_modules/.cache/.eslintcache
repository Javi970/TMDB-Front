[{"/home/augusto/Projects/TMDB/TMDB-Front/src/index.js":"1","/home/augusto/Projects/TMDB/TMDB-Front/src/App.js":"2","/home/augusto/Projects/TMDB/TMDB-Front/src/components/NavBar/NavBar.jsx":"3","/home/augusto/Projects/TMDB/TMDB-Front/src/components/Login/Login.jsx":"4","/home/augusto/Projects/TMDB/TMDB-Front/src/store/user.js":"5"},{"size":257,"mtime":1673965998231,"results":"6","hashOfConfig":"7"},{"size":4911,"mtime":1674738868683,"results":"8","hashOfConfig":"7"},{"size":2200,"mtime":1674745009709,"results":"9","hashOfConfig":"7"},{"size":2572,"mtime":1674742906586,"results":"10","hashOfConfig":"7"},{"size":305,"mtime":1674660871565,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1c1uig0",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/home/augusto/Projects/TMDB/TMDB-Front/src/index.js",[],[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/App.js",["29","30"],[],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport YouTube from 'react-youtube'\nimport './App.css'\nimport NavBar from './components/NavBar/NavBar'\nimport Login from './components/Login/Login'\n\nfunction App() {\n  const API_URL = 'https://api.themoviedb.org/3'\n  const API_KEY = 'c470ed460ab8e34d41a15eb2c5e77dfa'\n  const IMAGE_PATH = 'https://image.tmdb.org/t/p/original'\n  const URL_IMAGE = 'https://image.tmdb.org/t/p/original'\n\n  //variables de estado\n  const [movies, setMovies] = useState([])\n  const [searchKey, setSearchKey] = useState('')\n  const [trailer, setTrailer] = useState(null)\n  const [movie, setMovie] = useState({ title: 'Loading Movies' })\n  const [playing, setPlaying] = useState(false)\n\n  //funcion para realizar la peticion por get a la api\n  const fetchMovies = async (searchKey) => {\n    const type = searchKey ? 'search' : 'discover'\n    const {\n      data: { results },\n    } = await axios.get(`${API_URL}/${type}/movie`, {\n      params: {\n        api_key: API_KEY,\n        query: searchKey,\n      },\n    })\n    setMovies(results)\n    setMovie(results[0])\n\n    if (results.length) {\n      await fetchMovie(results[0].id)\n    }\n  }\n  //funcion para la peticion de un solo objeto y mostrar en reproductor de video\n  const fetchMovie = async (id) => {\n    const { data } = await axios.get(`${API_URL}/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        append_to_response: 'videos',\n      },\n    })\n\n    if (data.videos && data.videos.results) {\n      const trailer = data.videos.results.find(\n        (vid) => vid.name === 'Official Trailer',\n      )\n      setTrailer(trailer ? trailer : data.videos.results[0])\n    }\n    setMovie(data)\n  }\n\n  const selectMovie = async (movie) => {\n    fetchMovie(movie.id)\n    setMovie(movie)\n    window.scrollTo(0, 0)\n  }\n\n  //funcion para buscar peliculas\n  const searchMovies = (e) => {\n    e.preventDefault()\n    fetchMovies(searchKey)\n  }\n\n  useEffect(() => {\n    fetchMovies()\n  }, [])\n\n  return (\n    \n    <div>\n      <NavBar/>\n      <h2 className=\"text-center mt-5 mb-5\">Trailer Movies</h2>\n      {/* buscador */}\n      <form className=\"container mb-4\" onSubmit={searchMovies}>\n        <input\n          type=\"text\"\n          placeholder=\"search...\"\n          onChange={(e) => setSearchKey(e.target.value)}\n        />\n        <button className=\"btn btn-primary\">Search</button>\n      </form>\n\n      {/* aca va todo el contenedor del banner y del reproductor del video */}\n      <div>\n        <main>\n          {movie ? (\n            <div\n              className=\"viewtrailer\"\n              style={{\n                backgroundImage: `url(\"${IMAGE_PATH}${movie.backdrop_path}\")`,\n              }}\n            >\n              {playing ? (\n                <>\n                  <YouTube\n                    videoId={trailer.key}\n                    className=\"reproductor container\"\n                    containerClassName={'youtube-container amru'}\n                    opts={{\n                      width: '100%',\n                      height: '100%',\n                      playerVars: {\n                        autoplay: 1,\n                        controls: 0,\n                        cc_load_policy: 0,\n                        fs: 0,\n                        iv_load_policy: 0,\n                        modestbranding: 0,\n                        rel: 0,\n                        showinfo: 0,\n                      },\n                    }}\n                  />\n                  <button onClick={() => setPlaying(false)} className=\"boton\">\n                    Close\n                  </button>\n                </>\n              ) : (\n                <div className=\"container\">\n                  <div className=\"\">\n                    {trailer ? (\n                      <button\n                        className=\"boton\"\n                        onClick={() => setPlaying(true)}\n                        type=\"button\"\n                      >\n                        Play Trailer\n                      </button>\n                    ) : (\n                      'Sorry, no trailer available'\n                    )}\n                    <h1 className=\"text-white\">{movie.title}</h1>\n                    <p className=\"text-white\">{movie.overview}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : null}\n        </main>\n      </div>\n\n      <div className=\"container mt-3\">\n        <div className=\"row\">\n          {movies.map((movie) => (\n            <div key={movie.id} className=\"col-md-4 mb-3\" onClick={()=>selectMovie(movie)}>\n              <img\n                src={`${URL_IMAGE + movie.poster_path}`}\n                alt=\"\"\n                heigth={600}\n                width=\"100%\"\n              />\n              <h4 className=\"text-center\">{movie.title}</h4>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/home/augusto/Projects/TMDB/TMDB-Front/src/components/NavBar/NavBar.jsx",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/components/Login/Login.jsx",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/store/user.js",[],[],{"ruleId":"31","severity":1,"message":"32","line":6,"column":8,"nodeType":"33","messageId":"34","endLine":6,"endColumn":13},{"ruleId":"35","severity":1,"message":"36","line":71,"column":6,"nodeType":"37","endLine":71,"endColumn":8,"suggestions":"38"},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [fetchMovies]",{"range":"42","text":"43"},[1994,1996],"[fetchMovies]"]