[{"/home/augusto/Projects/TMDB/TMDB-Front/src/index.js":"1","/home/augusto/Projects/TMDB/TMDB-Front/src/App.js":"2","/home/augusto/Projects/TMDB/TMDB-Front/src/components/NavBar/NavBar.jsx":"3","/home/augusto/Projects/TMDB/TMDB-Front/src/components/Login/Login.jsx":"4","/home/augusto/Projects/TMDB/TMDB-Front/src/store/user.js":"5","/home/augusto/Projects/TMDB/TMDB-Front/src/store/store.js":"6","/home/augusto/Projects/TMDB/TMDB-Front/src/components/Home/Home.jsx":"7","/home/augusto/Projects/TMDB/TMDB-Front/src/components/SignUp/SignUp.jsx":"8","/home/augusto/Projects/TMDB/TMDB-Front/src/components/SideBar/SideBar.jsx":"9"},{"size":423,"mtime":1674769426608,"results":"10","hashOfConfig":"11"},{"size":1632,"mtime":1675084916889,"results":"12","hashOfConfig":"11"},{"size":1498,"mtime":1675114315953,"results":"13","hashOfConfig":"11"},{"size":2495,"mtime":1675114086301,"results":"14","hashOfConfig":"11"},{"size":1149,"mtime":1675084188896,"results":"15","hashOfConfig":"11"},{"size":183,"mtime":1675083559930,"results":"16","hashOfConfig":"11"},{"size":5239,"mtime":1674772077340,"results":"17","hashOfConfig":"11"},{"size":2798,"mtime":1674841990332,"results":"18","hashOfConfig":"11"},{"size":3086,"mtime":1675007772639,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1c1uig0",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/augusto/Projects/TMDB/TMDB-Front/src/index.js",[],[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/App.js",["49","50"],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/components/NavBar/NavBar.jsx",["51"],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/components/Login/Login.jsx",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/store/user.js",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/store/store.js",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/components/Home/Home.jsx",["52"],[],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport YouTube from 'react-youtube'\n\nconst Home =()=>{\n    const API_URL = 'https://api.themoviedb.org/3'\n    const API_KEY = 'c470ed460ab8e34d41a15eb2c5e77dfa'\n    const IMAGE_PATH = 'https://image.tmdb.org/t/p/original'\n    const URL_IMAGE = 'https://image.tmdb.org/t/p/original'\n\n\n    //variables de estado\n  const [movies, setMovies] = useState([])\n  const [searchKey, setSearchKey] = useState('')\n  const [trailer, setTrailer] = useState(null)\n  const [movie, setMovie] = useState({ title: 'Loading Movies' })\n  const [playing, setPlaying] = useState(false)\n\n    //funcion para realizar la peticion por get a la api\n    const fetchMovies = async (searchKey) => {\n        const type = searchKey ? 'search' : 'discover'\n        const {\n          data: { results },\n        } = await axios.get(`${API_URL}/${type}/movie`, {\n          params: {\n            api_key: API_KEY,\n            query: searchKey,\n          },\n        })\n        setMovies(results)\n        setMovie(results[0])\n    \n        if (results.length) {\n          await fetchMovie(results[0].id)\n        }\n      }\n      //funcion para la peticion de un solo objeto y mostrar en reproductor de video\n      const fetchMovie = async (id) => {\n        const { data } = await axios.get(`${API_URL}/movie/${id}`, {\n          params: {\n            api_key: API_KEY,\n            append_to_response: 'videos',\n          },\n        })\n    \n        if (data.videos && data.videos.results) {\n          const trailer = data.videos.results.find(\n            (vid) => vid.name === 'Official Trailer',\n          )\n          setTrailer(trailer ? trailer : data.videos.results[0])\n        }\n        setMovie(data)\n      }\n    \n      const selectMovie = async (movie) => {\n        fetchMovie(movie.id)\n        setMovie(movie)\n        window.scrollTo(0, 0)\n      }\n    \n      //funcion para buscar peliculas\n      const searchMovies = (e) => {\n        e.preventDefault()\n        fetchMovies(searchKey)\n      }\n    \n      useEffect(() => {\n        fetchMovies()\n      }, [])\n    return(\n        <div>\n            <h2 className=\"text-center mt-5 mb-5\">Trailer Movies</h2>\n        {/* buscador */}\n        <form className=\"container mb-4\" onSubmit={searchMovies}>\n          <input\n            type=\"text\"\n            placeholder=\"search...\"\n            onChange={(e) => setSearchKey(e.target.value)}\n          />\n          <button className=\"btn btn-primary\">Search</button>\n        </form>\n\n        {/* aca va todo el contenedor del banner y del reproductor del video */}\n        <div>\n          <main>\n            {movie ? (\n              <div\n                className=\"viewtrailer\"\n                style={{\n                  backgroundImage: `url(\"${IMAGE_PATH}${movie.backdrop_path}\")`,\n                }}\n              >\n                {playing ? (\n                  <>\n                    <YouTube\n                      videoId={trailer.key}\n                      className=\"reproductor container\"\n                      containerClassName={'youtube-container amru'}\n                      opts={{\n                        width: '100%',\n                        height: '100%',\n                        playerVars: {\n                          autoplay: 1,\n                          controls: 0,\n                          cc_load_policy: 0,\n                          fs: 0,\n                          iv_load_policy: 0,\n                          modestbranding: 0,\n                          rel: 0,\n                          showinfo: 0,\n                        },\n                      }}\n                    />\n                    <button onClick={() => setPlaying(false)} className=\"boton\">\n                      Close\n                    </button>\n                  </>\n                ) : (\n                  <div className=\"container\">\n                    <div className=\"\">\n                      {trailer ? (\n                        <button\n                          className=\"boton\"\n                          onClick={() => setPlaying(true)}\n                          type=\"button\"\n                        >\n                          Play Trailer\n                        </button>\n                      ) : (\n                        'Sorry, no trailer available'\n                      )}\n                      <h1 className=\"text-white\">{movie.title}</h1>\n                      <p className=\"text-white\">{movie.overview}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : null}\n          </main>\n        </div>\n\n        <div className=\"container mt-3\">\n          <div className=\"row\">\n            {movies.map((movie) => (\n              <div\n                key={movie.id}\n                className=\"col-md-4 mb-3\"\n                onClick={() => selectMovie(movie)}\n              >\n                <img\n                  src={`${URL_IMAGE + movie.poster_path}`}\n                  alt=\"\"\n                  heigth={600}\n                  width=\"100%\"\n                />\n                <h4 className=\"text-center\">{movie.title}</h4>\n              </div>\n            ))}\n          </div>\n        </div>\n        </div>\n\n\n    )\n}\n\nexport default Home","/home/augusto/Projects/TMDB/TMDB-Front/src/components/SignUp/SignUp.jsx",[],[],"/home/augusto/Projects/TMDB/TMDB-Front/src/components/SideBar/SideBar.jsx",[],[],{"ruleId":"53","severity":1,"message":"54","line":1,"column":28,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"58","line":22,"column":6,"nodeType":"59","endLine":22,"endColumn":8,"suggestions":"60"},{"ruleId":"53","severity":1,"message":"61","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":13},{"ruleId":"57","severity":1,"message":"62","line":69,"column":10,"nodeType":"59","endLine":69,"endColumn":12,"suggestions":"63"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["64"],"'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.",["65"],{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [dispatch]",{"range":"70","text":"71"},"Update the dependencies array to be: [fetchMovies]",{"range":"72","text":"73"},[725,727],"[dispatch]",[2096,2098],"[fetchMovies]"]